name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.1.0)'
        required: true
        type: string

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            # Vault Audit Tools ${{ steps.get_version.outputs.version }}
            
            High-performance Rust CLI for HashiCorp Vault audit log analysis.
            
            ## Features
            - 12 comprehensive analysis commands
            - 3x faster than Python implementation
            - 10x less memory usage
            - Single static binary
            
            ## Installation
            
            ### Linux (x86_64)
            ```bash
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.version }}/vault-audit-x86_64-unknown-linux-gnu.tar.gz
            tar -xzf vault-audit-x86_64-unknown-linux-gnu.tar.gz
            sudo mv vault-audit /usr/local/bin/
            ```
            
            ### macOS (Intel)
            ```bash
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.version }}/vault-audit-x86_64-apple-darwin.tar.gz
            tar -xzf vault-audit-x86_64-apple-darwin.tar.gz
            sudo mv vault-audit /usr/local/bin/
            ```
            
            ### macOS (Apple Silicon)
            ```bash
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.version }}/vault-audit-aarch64-apple-darwin.tar.gz
            tar -xzf vault-audit-aarch64-apple-darwin.tar.gz
            sudo mv vault-audit /usr/local/bin/
            ```
            
            ### Windows
            Download `vault-audit-x86_64-pc-windows-msvc.zip` and extract to your PATH.
            
            ## Checksums
            See `checksums.txt` for SHA256 hashes of all artifacts.

  build-release:
    name: Build Release Binary
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: vault-audit
            archive_name: vault-audit-x86_64-unknown-linux-gnu.tar.gz
          
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: vault-audit
            archive_name: vault-audit-x86_64-unknown-linux-musl.tar.gz
          
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: vault-audit
            archive_name: vault-audit-x86_64-apple-darwin.tar.gz
          
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: vault-audit
            archive_name: vault-audit-aarch64-apple-darwin.tar.gz
          
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: vault-audit.exe
            archive_name: vault-audit-x86_64-pc-windows-msvc.zip
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            vault-audit-tools/target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: |
          cd vault-audit-tools
          cargo build --release --target ${{ matrix.target }} --verbose

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          strip vault-audit-tools/target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd vault-audit-tools/target/${{ matrix.target }}/release
          tar -czf ../../../../${{ matrix.archive_name }} ${{ matrix.artifact_name }}
          cd ../../../../
          sha256sum ${{ matrix.archive_name }} >> checksums.txt

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd vault-audit-tools/target/${{ matrix.target }}/release
          7z a ../../../../${{ matrix.archive_name }} ${{ matrix.artifact_name }}
          cd ../../../../
          certutil -hashfile ${{ matrix.archive_name }} SHA256 >> checksums.txt

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.archive_name }}
          asset_name: ${{ matrix.archive_name }}
          asset_content_type: application/octet-stream

      - name: Upload checksums
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain

  publish-crates:
    name: Publish to crates.io
    needs: build-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: |
          cd vault-audit-tools
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        continue-on-error: true

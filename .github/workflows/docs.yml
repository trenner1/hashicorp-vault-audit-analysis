name: Versioned Rust docs to Pages

on:
  release:
    types: [published]          # build when a release is published
  push:
    tags: ['v*']                # build when version tags are pushed
    branches: ['main']          # keep "latest" fresh on main changes
  workflow_dispatch:            # allow manual runs

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  VERSION_COUNT: "10"           # how many most-recent v* tags to publish

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (full history for tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Prepare output
        shell: bash
        run: |
          set -euxo pipefail
          rm -rf _site
          mkdir -p _site
          : > _site/.versions   # mapping lines: "<version> <doc_crate>"

      - name: Build LATEST from current commit
        shell: bash
        run: |
          set -euxo pipefail

          # Find a crate directory with a proper [package] Cargo.toml
          find_crate_dir() {
            git ls-files | grep -E '(^|/)Cargo\.toml$' | while read -r c; do
              if grep -q '^\[package\]' "$c"; then dirname "$c" && exit 0; fi
            done
          }
          CRATE_DIR="$(find_crate_dir)"
          echo "CRATE_DIR(latest)=${CRATE_DIR}"

          # Extract package name
          CRATE_NAME="$(awk -F' *= *' '
            /^\[package\]/{p=1; next}
            p && /^name *=/ {gsub(/"/,"",$2); print $2; exit}
          ' "${CRATE_DIR}/Cargo.toml")"
          [ -n "${CRATE_NAME}" ]
          DOC_CRATE="$(echo "$CRATE_NAME" | tr '-' '_')"
          echo "CRATE_NAME(latest)=${CRATE_NAME}  DOC_CRATE=${DOC_CRATE}"

          # Build docs (prefer not to change lockfile for latest as well)
          pushd "$CRATE_DIR"
          rm -rf target/doc
          cargo doc --no-deps --locked || cargo doc --no-deps
          popd

          mkdir -p "_site/latest"
          cp -r "${CRATE_DIR}/target/doc" "_site/latest/"

          # Root redirect -> latest crate docs
          cat > _site/index.html <<EOF
          <!doctype html><meta charset="utf-8">
          <meta http-equiv="refresh" content="0; url=latest/${DOC_CRATE}/index.html">
          <link rel="canonical" href="latest/${DOC_CRATE}/index.html"/>
          EOF

      - name: Build recent TAGS in isolated worktrees
        shell: bash
        run: |
          set -euxo pipefail

          mapfile -t TAGS < <(git tag -l 'v*' --sort=-v:refname | head -n "${VERSION_COUNT}")

          for tag in "${TAGS[@]}"; do
            echo "=== Building ${tag} ==="
            WT="wt-${tag}"

            # Create a detached worktree for this tag
            git worktree add --detach "$WT" "$tag"

            # Helper to find crate dir inside the worktree
            find_crate_dir() {
              ( cd "$WT" && \
                git ls-files | grep -E '(^|/)Cargo\.toml$' | while read -r c; do
                  if grep -q '^\[package\]' "$c"; then dirname "$c" && exit 0; fi
                done )
            }

            CRATE_DIR="$(find_crate_dir || true)"
            if [[ -z "${CRATE_DIR:-}" ]]; then
              echo "::warning title=Skip ${tag}::No Cargo.toml with [package] found"
              git worktree remove --force "$WT"
              continue
            fi

            CRATE_NAME="$(awk -F' *= *' '
              /^\[package\]/{p=1; next}
              p && /^name *=/ {gsub(/"/,"",$2); print $2; exit}
            ' "$WT/${CRATE_DIR}/Cargo.toml" )"
            if [[ -z "${CRATE_NAME:-}" ]]; then
              echo "::warning title=Skip ${tag}::Could not extract package name"
              git worktree remove --force "$WT"
              continue
            fi
            DOC_CRATE="$(echo "$CRATE_NAME" | tr '-' '_')"
            echo "Worktree=${WT}  CRATE_DIR=${CRATE_DIR}  CRATE_NAME=${CRATE_NAME}  DOC_CRATE=${DOC_CRATE}"

            # Build docs inside the worktree; try to avoid lockfile changes
            ( set -eux
              cd "$WT/$CRATE_DIR"
              rm -rf target/doc
              cargo doc --no-deps --locked || cargo doc --no-deps
            )

            mkdir -p "_site/${tag}"
            cp -r "$WT/$CRATE_DIR/target/doc" "_site/${tag}/"

            # Record mapping for versions.html
            echo "${tag} ${DOC_CRATE}" >> _site/.versions

            # Remove the worktree to avoid accumulation/dirty state
            git worktree remove --force "$WT"
          done

      - name: Generate versions.html
        shell: bash
        run: |
          set -euo pipefail
          {
            cat <<'HTML'
          <!doctype html><meta charset="utf-8">
          <title>Documentation Versions</title>
          <h1>Documentation Versions</h1>
          <ul>
          HTML

            if [[ -s _site/.versions ]]; then
              # newest first by semantic version
              sort -rV _site/.versions | while read -r ver crate; do
                echo "<li><a href=\"${ver}/${crate}/index.html\">${ver}</a></li>"
              done
            fi

            cat <<'HTML'
          </ul>
          <p><a href="latest/">Latest (main)</a></p>
          HTML
          } > _site/versions.html

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
